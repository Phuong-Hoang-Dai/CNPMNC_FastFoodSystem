// <auto-generated />
using System;
using AgentManager.WebApp.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgentManager.WebApp.Migrations
{
    [DbContext(typeof(AgentManagerDbContext))]
    [Migration("20231005014714_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AgentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ReceptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AgentId");

                    b.HasIndex("AgentCategoryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.AgentCategory", b =>
                {
                    b.Property<int>("AgentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentCategoryId"), 1L, 1);

                    b.Property<int>("MaxDebt")
                        .HasColumnType("int");

                    b.HasKey("AgentCategoryId");

                    b.ToTable("AgentCategories");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.DeliveryNote", b =>
                {
                    b.Property<int>("DeliveryNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryNoteId"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("DeliveryNoteId");

                    b.HasIndex("AgentId");

                    b.HasIndex("StaffId");

                    b.ToTable("DeliveryNotes");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.DeliveryNoteDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryNoteId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "DeliveryNoteId");

                    b.HasIndex("DeliveryNoteId");

                    b.ToTable("DeliveryNoteDetails");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"), 1L, 1);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSCatere", b =>
                {
                    b.Property<string>("FFSCatereId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FFSCatereId");

                    b.ToTable("FFSCateres");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSDeliveryRecievedNote", b =>
                {
                    b.Property<string>("FFSDeliveryRecievedNoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FFSDeliveryRecievedNoteId");

                    b.HasIndex("StaffId");

                    b.ToTable("FFSDeliveryRecievedNotes");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSIngredient", b =>
                {
                    b.Property<string>("FFSIngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FFSCatereId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FFSIngredientId");

                    b.HasIndex("FFSCatereId");

                    b.ToTable("FFSIngredients");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSOrder", b =>
                {
                    b.Property<int>("FFSOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FFSOrderId"), 1L, 1);

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FFSVoucherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FFSOrderId");

                    b.HasIndex("FFSVoucherId");

                    b.HasIndex("StaffId");

                    b.ToTable("FFSOrders");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProduct", b =>
                {
                    b.Property<string>("FFSProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FFSProductCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("FFSProductId");

                    b.HasIndex("FFSProductCategoryId");

                    b.ToTable("FFSProducts");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProductCategory", b =>
                {
                    b.Property<string>("FFSProductCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FFSProductCategoryId");

                    b.ToTable("FFSProductCategories");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProductOrder", b =>
                {
                    b.Property<int>("FFSOrderId")
                        .HasColumnType("int");

                    b.Property<string>("FFSProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("FFSOrderId", "FFSProductId");

                    b.HasIndex("FFSProductId");

                    b.ToTable("FFSProductOrders");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSShipment", b =>
                {
                    b.Property<string>("FFSIngredientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FFSDeliveryRecievedNoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FFSIngredientId", "FFSDeliveryRecievedNoteId");

                    b.HasIndex("FFSDeliveryRecievedNoteId");

                    b.ToTable("FFSShipments");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSVoucher", b =>
                {
                    b.Property<string>("FFSVoucherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FFSVoucherId");

                    b.ToTable("FFSVouchers");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"), 1L, 1);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ItemUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductWeight")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReceiptId");

                    b.HasIndex("AgentId");

                    b.HasIndex("StaffId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Agent", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.AgentCategory", "AgentCategory")
                        .WithMany("Agents")
                        .HasForeignKey("AgentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.District", "District")
                        .WithMany("Agents")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentCategory");

                    b.Navigation("District");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.DeliveryNote", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Agent", "Agent")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", "Staff")
                        .WithMany("DeliveryNotes")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.DeliveryNoteDetail", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.DeliveryNote", "DeliveryNote")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("DeliveryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.Product", "Product")
                        .WithMany("DeliveryNoteDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryNote");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSDeliveryRecievedNote", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", "Staff")
                        .WithMany("FFSDeliveryRecievedNotes")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSIngredient", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.FFSCatere", "FFSCatere")
                        .WithMany("FFSIngredients")
                        .HasForeignKey("FFSCatereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FFSCatere");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSOrder", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.FFSVoucher", "FFSVoucher")
                        .WithMany("FFSOrders")
                        .HasForeignKey("FFSVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FFSVoucher");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProduct", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.FFSProductCategory", "FFSProductCategory")
                        .WithMany("FFSProducts")
                        .HasForeignKey("FFSProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FFSProductCategory");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProductOrder", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.FFSOrder", "FFSOrder")
                        .WithMany("FFSProductOrders")
                        .HasForeignKey("FFSOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.FFSProduct", "FFSProduct")
                        .WithMany("FFSProductOrders")
                        .HasForeignKey("FFSProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FFSOrder");

                    b.Navigation("FFSProduct");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSShipment", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.FFSDeliveryRecievedNote", "FFSDeliveryRecievedNote")
                        .WithMany("FFSShipments")
                        .HasForeignKey("FFSDeliveryRecievedNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.FFSIngredient", "FFSIngredient")
                        .WithMany("FFSShipments")
                        .HasForeignKey("FFSIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FFSDeliveryRecievedNote");

                    b.Navigation("FFSIngredient");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Product", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Receipt", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Agent", "Agent")
                        .WithMany("Receipts")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", "Staff")
                        .WithMany("Receipts")
                        .HasForeignKey("StaffId");

                    b.Navigation("Agent");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Staff", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.Position", "Position")
                        .WithMany("Staffs")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgentManager.WebApp.Models.Data.Staff", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Agent", b =>
                {
                    b.Navigation("DeliveryNotes");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.AgentCategory", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.DeliveryNote", b =>
                {
                    b.Navigation("DeliveryNoteDetails");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Department", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.District", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSCatere", b =>
                {
                    b.Navigation("FFSIngredients");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSDeliveryRecievedNote", b =>
                {
                    b.Navigation("FFSShipments");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSIngredient", b =>
                {
                    b.Navigation("FFSShipments");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSOrder", b =>
                {
                    b.Navigation("FFSProductOrders");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProduct", b =>
                {
                    b.Navigation("FFSProductOrders");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSProductCategory", b =>
                {
                    b.Navigation("FFSProducts");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.FFSVoucher", b =>
                {
                    b.Navigation("FFSOrders");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Position", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Product", b =>
                {
                    b.Navigation("DeliveryNoteDetails");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AgentManager.WebApp.Models.Data.Staff", b =>
                {
                    b.Navigation("DeliveryNotes");

                    b.Navigation("FFSDeliveryRecievedNotes");

                    b.Navigation("Orders");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
